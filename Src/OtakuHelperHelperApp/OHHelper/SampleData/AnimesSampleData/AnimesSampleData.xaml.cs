//      *********    DO NOT MODIFY THIS FILE     *********
//      This file is regenerated by a design tool. Making
//      changes to this file can cause errors.
namespace Expression.Blend.SampleData.AnimesSampleData
{
	using System; 
	using System.ComponentModel;

// To significantly reduce the sample data footprint in your production application, you can set
// the DISABLE_SAMPLE_DATA conditional compilation constant and disable sample data at runtime.
#if DISABLE_SAMPLE_DATA
	internal class AnimesSampleData { }
#else

	public class AnimesSampleData : INotifyPropertyChanged
	{
		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		public AnimesSampleData()
		{
			try
			{
				Uri resourceUri = new Uri("/OHHelper;component/SampleData/AnimesSampleData/AnimesSampleData.xaml", UriKind.RelativeOrAbsolute);
				System.Windows.Application.LoadComponent(this, resourceUri);
			}
			catch
			{
			}
		}

		private ItemCollection _Collection = new ItemCollection();

		public ItemCollection Collection
		{
			get
			{
				return this._Collection;
			}
		}
	}

	public class Item : INotifyPropertyChanged
	{
		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private string _Name = string.Empty;

		public string Name
		{
			get
			{
				return this._Name;
			}

			set
			{
				if (this._Name != value)
				{
					this._Name = value;
					this.OnPropertyChanged("Name");
				}
			}
		}

		private string _Url = string.Empty;

		public string Url
		{
			get
			{
				return this._Url;
			}

			set
			{
				if (this._Url != value)
				{
					this._Url = value;
					this.OnPropertyChanged("Url");
				}
			}
		}

		private Eps1 _Eps = new Eps1();

		public Eps1 Eps
		{
			get
			{
				return this._Eps;
			}
		}
	}

	public class ItemCollection : System.Collections.ObjectModel.ObservableCollection<Item>
	{ 
	}

	public class EpsItem : INotifyPropertyChanged
	{
		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private Ep _Ep = new Ep();

		public Ep Ep
		{
			get
			{
				return this._Ep;
			}

			set
			{
				if (this._Ep != value)
				{
					this._Ep = value;
					this.OnPropertyChanged("Ep");
				}
			}
		}

		private Eps _Eps = new Eps();

		public Eps Eps
		{
			get
			{
				return this._Eps;
			}
		}
	}

	public class Eps : System.Collections.ObjectModel.ObservableCollection<EpsItem>
	{ 
	}

	public class Ep : INotifyPropertyChanged
	{
		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private double _EpNumber = 0;

		public double EpNumber
		{
			get
			{
				return this._EpNumber;
			}

			set
			{
				if (this._EpNumber != value)
				{
					this._EpNumber = value;
					this.OnPropertyChanged("EpNumber");
				}
			}
		}

		private string _Url = string.Empty;

		public string Url
		{
			get
			{
				return this._Url;
			}

			set
			{
				if (this._Url != value)
				{
					this._Url = value;
					this.OnPropertyChanged("Url");
				}
			}
		}
	}

	public class EpsItem1 : INotifyPropertyChanged
	{
		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private Ep1 _Ep = new Ep1();

		public Ep1 Ep
		{
			get
			{
				return this._Ep;
			}

			set
			{
				if (this._Ep != value)
				{
					this._Ep = value;
					this.OnPropertyChanged("Ep");
				}
			}
		}
	}

	public class Eps1 : System.Collections.ObjectModel.ObservableCollection<EpsItem1>
	{ 
	}

	public class Ep1 : INotifyPropertyChanged
	{
		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private string _Number = string.Empty;

		public string Number
		{
			get
			{
				return this._Number;
			}

			set
			{
				if (this._Number != value)
				{
					this._Number = value;
					this.OnPropertyChanged("Number");
				}
			}
		}

		private string _Url = string.Empty;

		public string Url
		{
			get
			{
				return this._Url;
			}

			set
			{
				if (this._Url != value)
				{
					this._Url = value;
					this.OnPropertyChanged("Url");
				}
			}
		}
	}
#endif
}
